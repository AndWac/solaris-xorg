--- configure.ac	Fri Oct  5 10:09:46 2012
+++ configure.ac	Fri Oct  5 10:14:54 2012
@@ -164,7 +164,7 @@
 	AC_DEFINE(TV_OUT, 1, [Build TV-Out support for atimisc.])
 fi
 
-AC_DEFINE(USE_XAA, 1, [Build support for XAA])
+#AC_DEFINE(USE_XAA, 1, [Build support for XAA])
 
 # Properly handle EXA.
 AC_MSG_CHECKING([whether to enable EXA support])
--- src/radeon.h	Fri Oct  5 10:08:43 2012
+++ src/radeon.h	Fri Oct  5 10:43:28 2012
@@ -89,6 +89,7 @@
 #include "picturestr.h"
 #endif
 
+#include "compat-api.h"
 #include "atipcirename.h"
 
 #ifndef MAX
@@ -408,9 +409,9 @@
 
     RADEONSavePtr     SavedReg;         /* Original (text) mode              */
     RADEONSavePtr     ModeReg;          /* Current mode                      */
-    Bool              (*CloseScreen)(int, ScreenPtr);
+    Bool              (*CloseScreen)(CLOSE_SCREEN_ARGS_DECL);
 
-    void              (*BlockHandler)(int, pointer, pointer, pointer);
+    void              (*BlockHandler)(BLOCKHANDLER_ARGS_DECL);
 
     Bool              PaletteSavedOnVT; /* Palette saved on last VT switch   */
 
--- src/radeon_driver.c	Fri Oct  5 10:23:49 2012
+++ src/radeon_driver.c	Fri Oct  5 10:48:25 2012
@@ -120,7 +120,7 @@
 #endif /* __sparc__ */
 
 				/* Forward definitions for driver functions */
-static Bool RADEONCloseScreen(int scrnIndex, ScreenPtr pScreen);
+static Bool RADEONCloseScreen(CLOSE_SCREEN_ARGS_DECL);
 static Bool RADEONSaveScreen(ScreenPtr pScreen, int mode);
 static void RADEONSave(ScrnInfoPtr pScrn);
 
@@ -3037,15 +3037,14 @@
 #endif
 }
 
-static void RADEONBlockHandler(int i, pointer blockData,
-			       pointer pTimeout, pointer pReadmask)
+static void RADEONBlockHandler(BLOCKHANDLER_ARGS_DECL)
 {
-    ScreenPtr      pScreen = screenInfo.screens[i];
-    ScrnInfoPtr    pScrn   = xf86Screens[i];
+    SCREEN_PTR(arg);
+    ScrnInfoPtr    pScrn   = xf86ScreenToScrn(pScreen);
     RADEONInfoPtr  info    = RADEONPTR(pScrn);
 
     pScreen->BlockHandler = info->BlockHandler;
-    (*pScreen->BlockHandler) (i, blockData, pTimeout, pReadmask);
+    (*pScreen->BlockHandler) (BLOCKHANDLER_ARGS);
     pScreen->BlockHandler = RADEONBlockHandler;
 
     if (info->VideoTimerCallback)
@@ -5149,9 +5148,9 @@
  * text mode, unmap video memory, and unwrap and call the saved
  * CloseScreen function.
  */
-static Bool RADEONCloseScreen(int scrnIndex, ScreenPtr pScreen)
+static Bool RADEONCloseScreen(CLOSE_SCREEN_ARGS_DECL)
 {
-    ScrnInfoPtr    pScrn = xf86Screens[scrnIndex];
+    ScrnInfoPtr    pScrn = xf86ScreenToScrn(pScreen);
     RADEONInfoPtr  info  = RADEONPTR(pScrn);
 
     xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, RADEON_LOGLEVEL_DEBUG,
@@ -5240,7 +5239,7 @@
 
     pScreen->BlockHandler = info->BlockHandler;
     pScreen->CloseScreen = info->CloseScreen;
-    return (*pScreen->CloseScreen)(scrnIndex, pScreen);
+    return (*pScreen->CloseScreen)(CLOSE_SCREEN_ARGS);
 }
 
 void RADEONFreeScreen(int scrnIndex, int flags)
