--- lib/common/BasicTypes.h	Mon Nov 17 17:55:21 2014
+++ lib/common/BasicTypes.h	Tue Nov 18 14:42:13 2014
***************
*** 46,47 ****
--- 46,51 ----
  
+ #if !defined(TYPE_OF_SIZE_8)
+ #		define TYPE_OF_SIZE_8 long
+ #endif
+ 
  	//
***************
*** 74,75 ****
--- 78,80 ----
  typedef signed TYPE_OF_SIZE_4	SInt32;
+ typedef signed TYPE_OF_SIZE_8	SInt64;
  typedef unsigned TYPE_OF_SIZE_1	UInt8;
***************
*** 77,78 ****
--- 82,84 ----
  typedef unsigned TYPE_OF_SIZE_4	UInt32;
+ typedef unsigned TYPE_OF_SIZE_8	UInt64;
  #endif
***************
*** 85,86 ****
--- 91,93 ----
  #undef TYPE_OF_SIZE_4
+ #undef TYPE_OF_SIZE_8
  
--- lib/arch/CArch.h	Tue Nov 18 17:51:34 2014
+++ lib/arch/CArch.h	Tue Nov 18 17:19:49 2014
***************
*** 168,172 ****
  	virtual int			convStringMBToWC(wchar_t*,
! 							const char*, UInt32 n, bool* errors);
  	virtual int			convStringWCToMB(char*,
! 							const wchar_t*, UInt32 n, bool* errors);
  	virtual EWideCharEncoding
--- 168,172 ----
  	virtual int			convStringMBToWC(wchar_t*,
! 							const char*, UInt64 n, bool* errors);
  	virtual int			convStringWCToMB(char*,
! 							const wchar_t*, UInt64 n, bool* errors);
  	virtual EWideCharEncoding
--- lib/base/CLog.cpp	Mon Nov 17 13:04:51 2014
+++ lib/base/CLog.cpp	Mon Nov 17 17:27:49 2014
***************
*** 122,124 ****
    // compute suffix padding length
!   int sPad = m_maxNewlineLength;
  
--- 122,124 ----
    // compute suffix padding length
!   ssize_t sPad = m_maxNewlineLength;
  
***************
*** 127,129 ****
    char* buffer = stack;
!   int len      = (int)(sizeof(stack) / sizeof(stack[0]));
    while (true) {
--- 127,129 ----
    char* buffer = stack;
!   ssize_t len      = sizeof(stack) / sizeof(stack[0]);
    while (true) {
***************
*** 132,134 ****
      va_start(args, fmt);
!     int n = ARCH->vsnprintf(buffer, len  - sPad, fmt, args);
      va_end(args);
--- 132,134 ----
      va_start(args, fmt);
!     ssize_t n = ARCH->vsnprintf(buffer, len  - sPad, fmt, args);
      va_end(args);
***************
*** 136,138 ****
      // if the buffer wasn't big enough then make it bigger and try again
!     if (n < 0 || n > (int)len) {
        if (buffer != stack) {
--- 136,138 ----
      // if the buffer wasn't big enough then make it bigger and try again
!     if (n < 0 || n > len) {
        if (buffer != stack) {
***************
*** 195,197 ****
    }
!   int newlineLength = strlen(outputter->getNewline());
    if (newlineLength > m_maxNewlineLength) {
--- 195,197 ----
    }
!   ssize_t newlineLength = strlen(outputter->getNewline());
    if (newlineLength > m_maxNewlineLength) {
***************
*** 282,284 ****
    //char* end = msg + g_priorityPad + strlen(msg + g_priorityPad);
!   int len = strlen(msg);
    char* tmp = new char[len+m_maxNewlineLength+1];
--- 282,284 ----
    //char* end = msg + g_priorityPad + strlen(msg + g_priorityPad);
!   ssize_t len = strlen(msg);
    char* tmp = new char[len+m_maxNewlineLength+1];
--- lib/base/CLog.h	Tue Nov 18 13:59:51 2014
+++ lib/base/CLog.h	Mon Nov 17 14:33:29 2014
***************
*** 134,136 ****
  	COutputterList		m_alwaysOutputters;
! 	int					m_maxNewlineLength;
  	int					m_maxPriority;
--- 134,136 ----
  	COutputterList		m_alwaysOutputters;
! 	ssize_t					m_maxNewlineLength;
  	int					m_maxPriority;
--- lib/server/CServer.h	Tue Nov 18 17:57:34 2014
+++ lib/server/CServer.h	Tue Nov 18 17:58:49 2014
***************
*** 136,138 ****
  	*/
! 	UInt32				getNumClients() const;
  
--- 136,138 ----
  	*/
! 	UInt64				getNumClients() const;
  
--- lib/server/CServer.cpp	Tue Jan 13 17:05:29 2015
+++ lib/server/CServer.cpp	Tue Jan 13 17:05:42 2015
@@ -311,7 +311,7 @@
 	}
 }
 
-UInt32
+UInt64
 CServer::getNumClients() const
 {
 	return m_clients.size();
--- lib/net/CSocketMultiplexer.cpp	Tue Jul 21 13:28:40 2009
+++ lib/net/CSocketMultiplexer.cpp	Fri Nov 14 15:39:53 2014
***************
*** 200,202 ****
  
! 		int status;
  		try {
--- 200,202 ----
  
! 		long status;
  		try {
--- lib/base/CUnicode.cpp	Mon Nov 17 17:28:25 2014
+++ lib/base/CUnicode.cpp	Tue Nov 18 17:39:57 2014
***************
*** 99,101 ****
  	const UInt8* data = reinterpret_cast<const UInt8*>(src.c_str());
! 	for (UInt32 n = src.size(); n > 0; ) {
  		if (fromUTF8(data, n) == s_invalid) {
--- 99,101 ----
  	const UInt8* data = reinterpret_cast<const UInt8*>(src.c_str());
! 	for (UInt64 n = src.size(); n > 0; ) {
  		if (fromUTF8(data, n) == s_invalid) {
***************
*** 114,116 ****
  	// get size of input string and reserve some space in output
! 	UInt32 n = src.size();
  	CString dst;
--- 114,116 ----
  	// get size of input string and reserve some space in output
! 	UInt64 n = src.size();
  	CString dst;
***************
*** 143,145 ****
  	// get size of input string and reserve some space in output
! 	UInt32 n = src.size();
  	CString dst;
--- 143,145 ----
  	// get size of input string and reserve some space in output
! 	UInt64 n = src.size();
  	CString dst;
***************
*** 150,152 ****
  	while (n > 0) {
! 		UInt32 c = fromUTF8(data, n);
  		if (c == s_invalid) {
--- 150,152 ----
  	while (n > 0) {
! 		SInt64 c = fromUTF8(data, n);
  		if (c == s_invalid) {
***************
*** 167,169 ****
  	// get size of input string and reserve some space in output
! 	UInt32 n = src.size();
  	CString dst;
--- 167,169 ----
  	// get size of input string and reserve some space in output
! 	UInt64 n = src.size();
  	CString dst;
***************
*** 205,207 ****
  	// get size of input string and reserve some space in output
! 	UInt32 n = src.size();
  	CString dst;
--- 205,207 ----
  	// get size of input string and reserve some space in output
! 	UInt64 n = src.size();
  	CString dst;
***************
*** 233,235 ****
  	// convert to wide char
! 	UInt32 size;
  	wchar_t* tmp = UTF8ToWideChar(src, size, errors);
--- 233,235 ----
  	// convert to wide char
! 	UInt64 size;
  	wchar_t* tmp = UTF8ToWideChar(src, size, errors);
***************
*** 256,258 ****
  	// convert
! 	UInt32 n = src.size() >> 1;
  	return doUCS2ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
--- 256,258 ----
  	// convert
! 	UInt64 n = src.size() >> 1;
  	return doUCS2ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
***************
*** 267,269 ****
  	// convert
! 	UInt32 n = src.size() >> 2;
  	return doUCS4ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
--- 267,269 ----
  	// convert
! 	UInt64 n = src.size() >> 2;
  	return doUCS4ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
***************
*** 278,280 ****
  	// convert
! 	UInt32 n = src.size() >> 1;
  	return doUTF16ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
--- 278,280 ----
  	// convert
! 	UInt64 n = src.size() >> 1;
  	return doUTF16ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
***************
*** 289,291 ****
  	// convert
! 	UInt32 n = src.size() >> 2;
  	return doUTF32ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
--- 289,291 ----
  	// convert
! 	UInt64 n = src.size() >> 2;
  	return doUTF32ToUTF8(reinterpret_cast<const UInt8*>(src.data()), n, errors);
***************
*** 300,302 ****
  	// convert string to wide characters
! 	UInt32 n     = src.size();
  	int len      = ARCH->convStringMBToWC(NULL, src.c_str(), n, errors);
--- 300,302 ----
  	// convert string to wide characters
! 	UInt64 n     = src.size();
  	int len      = ARCH->convStringMBToWC(NULL, src.c_str(), n, errors);
***************
*** 315,317 ****
  wchar_t*
! CUnicode::UTF8ToWideChar(const CString& src, UInt32& size, bool* errors)
  {
--- 315,317 ----
  wchar_t*
! CUnicode::UTF8ToWideChar(const CString& src, UInt64& size, bool* errors)
  {
***************
*** 376,378 ****
  CString
! CUnicode::doUCS2ToUTF8(const UInt8* data, UInt32 n, bool* errors)
  {
--- 376,378 ----
  CString
! CUnicode::doUCS2ToUTF8(const UInt8* data, UInt64 n, bool* errors)
  {
***************
*** 412,414 ****
  CString
! CUnicode::doUCS4ToUTF8(const UInt8* data, UInt32 n, bool* errors)
  {
--- 412,414 ----
  CString
! CUnicode::doUCS4ToUTF8(const UInt8* data, UInt64 n, bool* errors)
  {
***************
*** 448,450 ****
  CString
! CUnicode::doUTF16ToUTF8(const UInt8* data, UInt32 n, bool* errors)
  {
--- 448,450 ----
  CString
! CUnicode::doUTF16ToUTF8(const UInt8* data, UInt64 n, bool* errors)
  {
***************
*** 510,512 ****
  CString
! CUnicode::doUTF32ToUTF8(const UInt8* data, UInt32 n, bool* errors)
  {
--- 510,512 ----
  CString
! CUnicode::doUTF32ToUTF8(const UInt8* data, UInt64 n, bool* errors)
  {
***************
*** 550,552 ****
  UInt32
! CUnicode::fromUTF8(const UInt8*& data, UInt32& n)
  {
--- 550,552 ----
  UInt32
! CUnicode::fromUTF8(const UInt8*& data, UInt64& n)
  {
--- lib/base/CUnicode.h	Tue Nov 18 17:10:39 2014
+++ lib/base/CUnicode.h	Tue Nov 18 17:22:44 2014
***************
*** 120,122 ****
  	static wchar_t*		UTF8ToWideChar(const CString&,
! 							UInt32& size, bool* errors);
  
--- 120,122 ----
  	static wchar_t*		UTF8ToWideChar(const CString&,
! 							UInt64& size, bool* errors);
  
***************
*** 128,133 ****
  	// internal conversion to UTF8
! 	static CString		doUCS2ToUTF8(const UInt8* src, UInt32 n, bool* errors);
! 	static CString		doUCS4ToUTF8(const UInt8* src, UInt32 n, bool* errors);
! 	static CString		doUTF16ToUTF8(const UInt8* src, UInt32 n, bool* errors);
! 	static CString		doUTF32ToUTF8(const UInt8* src, UInt32 n, bool* errors);
  
--- 128,133 ----
  	// internal conversion to UTF8
! 	static CString		doUCS2ToUTF8(const UInt8* src, UInt64 n, bool* errors);
! 	static CString		doUCS4ToUTF8(const UInt8* src, UInt64 n, bool* errors);
! 	static CString		doUTF16ToUTF8(const UInt8* src, UInt64 n, bool* errors);
! 	static CString		doUTF32ToUTF8(const UInt8* src, UInt64 n, bool* errors);
  
***************
*** 134,136 ****
  	// convert characters to/from UTF8
! 	static UInt32		fromUTF8(const UInt8*& src, UInt32& size);
  	static void			toUTF8(CString& dst, UInt32 c, bool* errors);
--- 134,136 ----
  	// convert characters to/from UTF8
! 	static UInt32		fromUTF8(const UInt8*& src, UInt64& size);
  	static void			toUTF8(CString& dst, UInt32 c, bool* errors);
--- lib/arch/IArchNetwork.h	Tue Nov 18 17:50:32 2014
+++ lib/arch/IArchNetwork.h	Tue Nov 18 17:45:41 2014
***************
*** 62,64 ****
  		kUNKNOWN,
! 		kINET,
  	};
--- 62,64 ----
  		kUNKNOWN,
! 		kINET
  	};
--- lib/arch/CArch.cpp	Fri Jan  9 17:44:20 2015
+++ lib/arch/CArch.cpp	Fri Jan  9 17:44:37 2015
@@ -591,13 +591,13 @@
 }
 
 int
-CArch::convStringMBToWC(wchar_t* dst, const char* src, UInt32 n, bool* errors)
+CArch::convStringMBToWC(wchar_t* dst, const char* src, UInt64 n, bool* errors)
 {
 	return m_string->convStringMBToWC(dst, src, n, errors);
 }
 
 int
-CArch::convStringWCToMB(char* dst, const wchar_t* src, UInt32 n, bool* errors)
+CArch::convStringWCToMB(char* dst, const wchar_t* src, UInt64 n, bool* errors)
 {
 	return m_string->convStringWCToMB(dst, src, n, errors);
 }



--- lib/arch/CArchFileUnix.cpp	Tue Jul 21 13:28:40 2009
+++ lib/arch/CArchFileUnix.cpp	Wed Jan  7 05:09:38 2015
@@ -56,7 +56,7 @@
 	std::string dir;
 #if HAVE_GETPWUID_R
 	struct passwd pwent;
-	struct passwd* pwentp;
+	struct passwd* pwentp = NULL;
 #if defined(_SC_GETPW_R_SIZE_MAX)
 	long size = sysconf(_SC_GETPW_R_SIZE_MAX);
 	if (size == -1) {
--- lib/arch/CArchNetworkBSD.cpp	Tue Jul 21 13:28:40 2009
+++ lib/arch/CArchNetworkBSD.cpp	Tue Jan  6 12:38:06 2015
@@ -316,7 +316,7 @@
 	if (n > 0 && unblockPipe != NULL && (pfd[num].revents & POLLIN) != 0) {
 		// the unblock event was signalled.  flush the pipe.
 		char dummy[100];
-		int ignore;
+		ssize_t ignore;
 
 		do {
 			ignore = read(unblockPipe[0], dummy, sizeof(dummy));
@@ -491,7 +491,7 @@
 	const int* unblockPipe = getUnblockPipeForThread(thread);
 	if (unblockPipe != NULL) {
 		char dummy = 0;
-		int ignore;
+		ssize_t ignore;
 
 		ignore = write(unblockPipe[1], &dummy, 1);
 	}
--- lib/base/CUnicode.cpp	Tue Jan 13 16:03:55 2015
+++ lib/base/CUnicode.cpp	Tue Jan  6 14:31:59 2015
@@ -349,7 +349,7 @@
 }
 
 CString
-CUnicode::wideCharToUTF8(const wchar_t* src, UInt32 size, bool* errors)
+CUnicode::wideCharToUTF8(const wchar_t* src, UInt64 size, bool* errors)
 {
 	// convert from platform's wide character encoding.
 	// note -- this must include a wide nul character (independent of
--- lib/base/CUnicode.h	Tue Jan 13 16:03:55 2015
+++ lib/base/CUnicode.h	Tue Jan  6 12:46:53 2015
@@ -123,7 +123,7 @@
 	// convert nul terminated wchar_t string (in platform's native
 	// encoding) to UTF8.
 	static CString		wideCharToUTF8(const wchar_t*,
-							UInt32 size, bool* errors);
+							UInt64 size, bool* errors);
 
 	// internal conversion to UTF8
 	static CString		doUCS2ToUTF8(const UInt8* src, UInt64 n, bool* errors);
--- lib/arch/IArchString.h	Wed Jan 14 16:45:00 2015
+++ lib/arch/IArchString.h	Wed Jan 14 16:45:16 2015
@@ -52,11 +52,11 @@
 
 	//! Convert multibyte string to wide character string
 	virtual int			convStringMBToWC(wchar_t*,
-							const char*, UInt32 n, bool* errors) = 0;
+							const char*, UInt64 n, bool* errors) = 0;
 
 	//! Convert wide character string to multibyte string
 	virtual int			convStringWCToMB(char*,
-							const wchar_t*, UInt32 n, bool* errors) = 0;
+							const wchar_t*, UInt64 n, bool* errors) = 0;
 
 	//! Return the architecture's native wide character encoding
 	virtual EWideCharEncoding
--- lib/arch/CArchStringUnix.h	Wed Jan 14 17:35:08 2015
+++ lib/arch/CArchStringUnix.h	Wed Jan 14 17:35:20 2015
@@ -29,9 +29,9 @@
 	virtual int			vsnprintf(char* str,
 							int size, const char* fmt, va_list ap);
 	virtual int			convStringMBToWC(wchar_t*,
-							const char*, UInt32 n, bool* errors);
+							const char*, UInt64 n, bool* errors);
 	virtual int			convStringWCToMB(char*,
-							const wchar_t*, UInt32 n, bool* errors);
+							const wchar_t*, UInt64 n, bool* errors);
 	virtual EWideCharEncoding
 						getWideCharEncoding();
 };
--- lib/arch/CMultibyte.cpp	Wed Jan 14 17:38:32 2015
+++ lib/arch/CMultibyte.cpp	Tue Jul 21 13:28:40 2009
@@ -79,7 +79,7 @@
 
 int
 ARCH_STRING::convStringWCToMB(char* dst,
-				const wchar_t* src, UInt32 n, bool* errors)
+				const wchar_t* src, UInt64 n, bool* errors)
 {
 	int len = 0;
 
@@ -130,7 +130,7 @@
 
 int
 ARCH_STRING::convStringMBToWC(wchar_t* dst,
-				const char* src, UInt32 n, bool* errors)
+				const char* src, UInt64 n, bool* errors)
 {
 	int len = 0;
 	wchar_t dummy;
